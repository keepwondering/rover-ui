name: deploy-ui

on:
  push:
    branches: [main, qa, dev]

concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # WIF
      contents: read

    env:
      # default; will be overwritten by the branch selector step
      TF_DIR: infra/dev/rover-ui
      ROVER_NUXT_OUTPUT: dist

    steps:
      - uses: actions/checkout@v4

      # Authoritative values from GitHub VARIABLES (not secrets):
      # ROVER_GCP_PROJECT_ID, ROVER_GCP_REGION, ROVER_REPO_NAME
      - name: Export GitHub Variables
        run: |
          {
            echo "ROVER_GCP_PROJECT_ID=${{ vars.ROVER_GCP_PROJECT_ID }}"
            echo "ROVER_REGION=${{ vars.ROVER_GCP_REGION }}"
            echo "ROVER_REPO_NAME=${{ vars.ROVER_REPO_NAME }}"   # just repo id, e.g. rover-app
          } >> "$GITHUB_ENV"

      # Branch -> env mapping
      - name: Select env (branch → TF_DIR/vars)
        run: |
          case "${GITHUB_REF_NAME}" in
            main) TF_DIR="infra/prod/rover-ui"; TF_VARS="prod.tfvars" ;;
            qa)   TF_DIR="infra/qa/rover-ui";   TF_VARS="qa.tfvars"   ;;
            dev|*)TF_DIR="infra/dev/rover-ui";  TF_VARS="dev.tfvars"  ;;
          esac
          echo "TF_DIR=$TF_DIR"   >> "$GITHUB_ENV"
          echo "TF_VARS=$TF_VARS" >> "$GITHUB_ENV"
          echo "Using $TF_DIR with $TF_VARS"

      # Read values from tfvars and export only the ones we need from there
      - name: Load tfvars → env (bash-only)
        env:
          TFV: ${{ env.TF_DIR }}/${{ env.TF_VARS }}
        run: |
          kv () {
            awk -v key="$1" -F= '
              /^[[:space:]]*#/ {next}
              /^[[:space:]]*$/ {next}
              $1 ~ "^[[:space:]]*"key"[[:space:]]*$" {
                val=$2
                sub(/#.*/,"",val); sub(/\/\/.*/,"",val)
                gsub(/^[[:space:]]+|[[:space:]]+$/,"",val)
                gsub(/^"/,"",val); gsub(/"$/,"",val)
                print val; exit
              }' "$TFV"
          }
          SVC="$(kv service_name)"
          DOM="$(kv domain_name)"
          echo "ROVER_SERVICE_NAME=$SVC" >> "$GITHUB_ENV"
          echo "ROVER_DOMAIN_NAME=$DOM"  >> "$GITHUB_ENV"

          # Hard fail if service_name is empty to avoid bad tags
          if [ -z "$SVC" ]; then
            echo "::error::service_name not found in $TFV"
            echo "Contents of $TFV:"; sed -n '1,200p' "$TFV"
            exit 1
          fi
      # Build Nuxt (no Docker yet)
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        env: { NUXT_TELEMETRY_DISABLED: 1 }
        run: npm ci
      - name: Build static (Nuxt)
        env: { NUXT_TELEMETRY_DISABLED: 1 }
        run: |
          npm run generate
          ls -lah "${{ env.ROVER_NUXT_OUTPUT }}" || (echo "Missing $ROVER_NUXT_OUTPUT" && exit 1)

      # WIF auth
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.ROVER_GCP_WIF_PROVIDER }}
          service_account: ${{ vars.ROVER_GCP_SA_EMAIL }}
          create_credentials_file: true
          export_environment_variables: true

      # 1) Authenticate to GCP as your SA via WIF (no JSON key)
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.ROVER_GCP_WIF_PROVIDER }}  # e.g. projects/..../providers/gh-publisher
          service_account: ${{ vars.ROVER_GCP_SA_EMAIL }}                 # e.g. org-deployer@homelab-470619.iam.gserviceaccount.com
          create_credentials_file: true
          export_environment_variables: true

      # 2) Install gcloud bound to that SA
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.ROVER_GCP_PROJECT_ID }}

      # (Optional sanity check)
      - name: Who am I?
        run: |
          gcloud auth list
          gcloud config list project

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.ROVER_GCP_PROJECT_ID }}

      # Build nginx image that serves the generated assets, push to Artifact Registry
      - name: Docker auth to Artifact Registry
        run: gcloud auth configure-docker ${{ env.ROVER_REGION }}-docker.pkg.dev -q

      - name: Build & push image
        id: build
        run: |
          SHORT_SHA="${GITHUB_SHA::12}"
          IMAGE="${{ env.ROVER_REPO_NAME }}/${{ env.ROVER_SERVICE_NAME }}:${SHORT_SHA}"
          docker build \
            -f docker/Dockerfile \
            --build-arg NUXT_OUTPUT="${{ env.ROVER_NUXT_OUTPUT }}" \
            -t "$IMAGE" .
          docker push "$IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      # Terraform apply (override project/region via TF_VAR_*; pass only dynamic image)
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -backend-config=backend.hcl
      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_VAR_project_id: ${{ env.ROVER_GCP_PROJECT_ID }}
          TF_VAR_region:     ${{ env.ROVER_REGION }}
          TF_VAR_image:      ${{ steps.build.outputs.image }}
        run: terraform apply -auto-approve -var-file=${{ env.TF_VARS }}

      # DNS records (first-time mapping)
      - name: Show DNS records
        if: always()
        run: |
          DM="$(terraform -chdir=${{ env.TF_DIR }} output -raw domain_name || true)"
          if [[ -n "$DM" ]]; then
            gcloud beta run domain-mappings describe \
              --domain "$DM" \
              --region "${{ env.ROVER_REGION }}" \
              --format="table(status.resourceRecords[].name,status.resourceRecords[].type,status.resourceRecords[].rrdata)" || true
          fi

      - name: Summary
        if: always()
        run: |
          URL="$(terraform -chdir=${{ env.TF_DIR }} output -raw service_url || true)"
          echo "Deployed image: ${{ steps.build.outputs.image }}"
          echo "Service URL:    ${URL}"
